Stored Procedures:
-Posts:
Fetch Post Comments - INPUT: @postId, OUTPUT: userName ('User.name'), userHandle ('User.handle'), userImage ('Image.imageUrl'), postId ('Post.postId'), 
content ('Post.content'), likeCount ('COUNT(Like)'), commentCount ('COUNT(replyToPostId)'), 
imageUrls: [{imageUrl: 'Image.imageUrl', aspectRatio: 'PostImage.aspectRatio'}] (This should be and array of JSON data), createdOn ('Post.createdOn'), 
replyToPostId ('Post.replyToPostId'), isLiked ('Will need a second join to Chat.Like that also joins on userId = @userId and then checks IS NOT NULL')
  NOTE: ORDER BY P.postId = @postId DESC so that the very first post is the original post

Update User Post - INPUT: @postId, @content, @images (IMAGE), OUTPUT: @deletedImages (the publicId of the image(s) that was replaced (if a new image was provided) (use a merge statement to delete unused images and insert new images)

Delete a User Post - INPUT: @postId, OUTPUT: none

Fetch all users who liked a post - INPUT: @postId, OUTPUT: userName ('User.name'), userImage ('Image.imageUrl'), userHandle ('User.handle'), bio ('User.bio')

Create a post like - INPUT: @postId, @userId, OUTPUT: none

-User:
Fetch User Profile - INPUT: @userId, OUTPUT: JSON Data: {userImage: 'Image.imageUrl', userName: 'User.name', userHandle: 'User.handle', bio: 'User.bio', 
  createdDate: 'User.createOn', ethereumAddress: 'User.ethereumAddress', followerCount: 'COUNT(Follower)', followingCount: 'COUNT(Following)', 
  communityCount: 'COUNT(Community)', posts: [{postId: 'Post.postId', content: 'Post.content', likeCount: 'COUNT(Like)', commentCount: 'COUNT(replyToPostId)', 
  imageUrls: [{imageUrl: 'Image.imageUrl', aspectRatio: 'PostImage.aspectRatio'}], createdOn: 'Post.createdOn', replyToPostId: 'Post.replyToPostId', 
  isLiked ('Will need a second join to Chat.Like that also joins on userId = @userId and then checks IS NOT NULL')}]

Fetch User Followers - INPUT: @userId, OUTPUT: userName ('User.name'), userHandle ('User.handle'), userImage ('Image.imageUrl'), bio ('User.bio')

Fetch User Following - INPUT: @userId, OUTPUT: userName ('User.name'), userHandle ('User.handle'), userImage ('Image.imageUrl'), bio ('User.bio')

Update User - INPUT: @userId, @image (IMAGE), @bio, @handle, @name, OUTPUT: @deletedImage (the publicId of the iamge that was replaced (if a new image was provided))

Stored Procedures Completed:
Create Post ( and create post comment)
Create User
